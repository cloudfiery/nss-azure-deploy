{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "newStorageAccount": {
      "type": "string",
      "metadata": {
        "description": "Globally unique lowercase name of your storage account"
      }
    },
    "storageAccountType": {
      "type": "string",
      "metadata": {
        "description": "The type of the Storage Account created"
      },
      "defaultValue": "Standard_LRS"
    },
    "storageAccountNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "Description": "Indicates whether the Storage Account is new or existing"
      }
    },
    "existingStorageAccountRG": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Storage Resource Group of the Existing VM."
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Virtual Machine (VM)"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_E4-2s_v3",
      "metadata": {
        "description": "Virtual Machine Size"
      }
    },
    "sasToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SAS Token for Zscaler's VHDs. Contact Zscaler Support to receive the token. Example of SAS token: sp=r&st=2019-05-07T03:18:56Z&se=2020-05-31T11:18:56Z&spr=https&sv=2018-03-28&sig=AmDuefmdf7lNjrF0aOdUenpuwmo4F5uq7X2oFFtHTzg%3D&sr=b"
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "zsroot",
      "metadata": {
        "description": "This is the username you wish to assign to your VMs admin account"
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
      }
    },
    "virtualNetworkResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the existing VNET resource group. If vNetNewOrExisting is set to existing, than specify the Resource Group where existing Virtual Network is located. If vNetNewOrExisting i set to new, leave this field as [resourceGroup().name]"
      }
    },
    "vNetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Specify whether to create a new or use existing virtual network for the VM."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "Zscaler-NSS-Subnet",
      "metadata": {
        "description": "If vNetNewOrExisting is set to existing, than specify the subnet that alredy exist. If vNetNewOrExisting is set to new, than provide name for the new subnet. The name must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens. The name must be between 1 and 80 characters."
      }
    },
    "natGatewayNeeded": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Specify whether to create a new or existing virtual network for the VM."
      }
    },
    "vnetAddressSpace": {
      "type": "string",
      "defaultValue": "192.168.100.0/24",
      "metadata": {
        "description": "Address space of new or existing Virtual Network."
      }
    },
    "vnetSubnetPrefix": {
      "type": "string",
      "defaultValue": "192.168.100.0/25",
      "metadata": {
        "description": "Subnet prefix for virtual network."
      }
    },
    "NEW_NAME_SERVER_IP": {
      "type": "string",
      "defaultValue": "168.63.129.16",
      "metadata": {
        "description": "Default Zscaler DNS Name Server"
      }
    },
    "SM_NET_DEV": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Service interface IP address with netmask."
      }
    },
    "SM_NET_DFLT_GW": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Service interface default gateway IP address."
      }
    }
  },

  "variables": {
    "publicIPDns": "[concat('gw-', uniqueString(resourceGroup().id))]",
    "publicIPAddress1Name": "[concat(variables('vmName'), '-IP')]",
    "publicIPAddress2Name": "[concat(variables('natGatewayName'), '-IP')]",
    "publicIpAddresses": [
      {
        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddress1Name'))]"
      }
    ],
    "location": "[resourceGroup().location]",
    "vmName": "[concat(parameters('vmName'), '-VM')]",
    "virtualNetworkName": "[parameters('virtualNetworkName')]",
    "subnetName": "[parameters('subnetName')]",
    "nic1Name": "[concat(variables('vmName'), '-MGMT-NIC')]",
    "nic2Name": "[concat(variables('vmName'), '-SRVC-NIC')]",
    "publicIPAddressType": "Dynamic",
    "natGatewayName": "[concat(variables('virtualNetworkName'), '-NATGW')]",
    "sourceOSvhdURL": "https://zsprod.blob.core.windows.net/nss/znss_5_0_osdisk.vhd",
    "scriptUrl": "https://raw.githubusercontent.com/willguibr/nss-azure-deploy/main/scripts/copyvhd.ps1",
    "vhdStorageAccountNamePrefix": "vhdstorage",
    "vhdStorageAccountName": "[toLower(concat(variables('vhdStorageAccountNamePrefix'), uniqueString(subscription().id, resourceGroup().id, deployment().name)))]",
    "vhdStorageAccountSKU": "Standard_LRS",
    "vhdStorageAccountContainerName": "zscalernssrprod01",
    "destOSvhdName": "znss_osdisk.vhd",
    "automationAccountNamePrefix": "VHDcopy-Automation",
    "automationAccountName": "[concat(variables('automationAccountNamePrefix'), '-', uniqueString(subscription().id, resourceGroup().id, deployment().name))]",
    "automationSKU": "Basic",
    "runbookName": "CopyVHD",
    "runbookDescription": "This runbook copies VHD accross storage accounts.",
    "psModules": {
      "azAccounts": {
        "name": "Az.Accounts",
        "url": "https://github.com/willguibr/nss-azure-deploy/raw/main/assets/az.accounts.2.5.1.nupkg"
      },
      "azStorage": {
        "name": "Az.Storage",
        "url": "https://github.com/willguibr/nss-azure-deploy/raw/main/assets/az.storage.2.0.0.nupkg"
      }
    },
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "networkSecurityGroupName": "[concat(variables('vmName'), '-NSG')]",
    "subnetRef": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'),  parameters('subnetName'))]",
    "destinationOSvhdURL": "[concat('https://',variables('vhdStorageAccountName'), '.blob.core.windows.net/', variables('vhdStorageAccountContainerName'), '/', variables('destOSvhdName'))]",
    "uniqueBase1": "[toLower(uniqueString(parameters('virtualNetworkName'), resourceGroup().id))]",
    "guid1": "[concat(substring(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(concat(variables('uniqueBase1'),variables('uniqueBase1'),substring(variables('uniqueBase1'),0,10)),'g','0'),'h','1'),'i','2'),'j','3'),'k','4'),'l','5'),'m','6'),'n','7'),'o','8'),'p','9'),'q','a'),'r','b'),'s','c'),'t','d'),'u','e'),'v','f'),'w','0'),'x','1'),'y','2'),'z','3'),0,8),'-',substring(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(concat(variables('uniqueBase1'),variables('uniqueBase1'),substring(variables('uniqueBase1'),0,10)),'g','0'),'h','1'),'i','2'),'j','3'),'k','4'),'l','5'),'m','6'),'n','7'),'o','8'),'p','9'),'q','a'),'r','b'),'s','c'),'t','d'),'u','e'),'v','f'),'w','0'),'x','1'),'y','2'),'z','3'),9,4),'-',substring(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(concat(variables('uniqueBase1'),variables('uniqueBase1'),substring(variables('uniqueBase1'),0,10)),'g','0'),'h','1'),'i','2'),'j','3'),'k','4'),'l','5'),'m','6'),'n','7'),'o','8'),'p','9'),'q','a'),'r','b'),'s','c'),'t','d'),'u','e'),'v','f'),'w','0'),'x','1'),'y','2'),'z','3'),14,4),'-',substring(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(concat(variables('uniqueBase1'),variables('uniqueBase1'),substring(variables('uniqueBase1'),0,10)),'g','0'),'h','1'),'i','2'),'j','3'),'k','4'),'l','5'),'m','6'),'n','7'),'o','8'),'p','9'),'q','a'),'r','b'),'s','c'),'t','d'),'u','e'),'v','f'),'w','0'),'x','1'),'y','2'),'z','3'),19,4),'-',substring(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(concat(variables('uniqueBase1'),variables('uniqueBase1'),substring(variables('uniqueBase1'),0,10)),'g','0'),'h','1'),'i','2'),'j','3'),'k','4'),'l','5'),'m','6'),'n','7'),'o','8'),'p','9'),'q','a'),'r','b'),'s','c'),'t','d'),'u','e'),'v','f'),'w','0'),'x','1'),'y','2'),'z','3'),24,12))]"
  },
  "resources": [
    {
      "name": "[variables('vhdStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[variables('location')]",
      "apiVersion": "2021-09-01",
      "sku": {
        "name": "[variables('vhdStorageAccountSKU')]"
      },
      "dependsOn": [],
      "kind": "StorageV2",
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2021-09-01",
          "dependsOn": [
            "[concat('Microsoft.Storage/storageAccounts/', variables('vhdStorageAccountName'))]"
          ],
          "name": "[concat('default/',variables('vhdStorageAccountContainerName'))]"
        }
      ]
    },
    {
      "name": "[variables('automationAccountName')]",
      "type": "Microsoft.Automation/automationAccounts",
      "apiVersion": "2021-06-22",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('vhdStorageAccountName'))]"
      ],
      "properties": {
        "sku": {
          "name": "[variables('automationSKU')]"
        }
      },
      "resources": [
        {
          "name": "automationCredential",
          "type": "credentials",
          "apiVersion": "2020-01-13-preview",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'))]"
          ],
          "properties": {
            "userName": "unusedUsername",
            "password": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('vhdStorageAccountName')), '2018-07-01').keys[0].value]",
            "description": "string"
          }
        },
        {
          "name": "[variables('runbookName')]",
          "type": "runbooks",
          "apiVersion": "2019-06-01",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'))]"
          ],
          "properties": {
            "runbookType": "Script",
            "logProgress": "false",
            "logVerbose": "false",
            "description": "[variables('runbookDescription')]",
            "publishContentLink": {
              "uri": "[variables('scriptUrl')]",
              "version": "1.0.0.0"
            }
          }
        },
        {
          "name": "[variables('psModules').azAccounts.name]",
          "type": "Modules",
          "apiVersion": "2020-01-13-preview",
          "tags": {},
          "dependsOn": [
            "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'))]"
          ],
          "properties": {
            "contentLink": {
              "uri": "[variables('psModules').azAccounts.url]"
            }
          }
        },
        {
          "name": "[variables('psModules').azStorage.name]",
          "type": "Modules",
          "apiVersion": "2020-01-13-preview",
          "tags": {},
          "dependsOn": [
            "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'))]",
            "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'), '/Modules/', variables('psModules').azAccounts.name)]"
          ],
          "properties": {
            "contentLink": {
              "uri": "[variables('psModules').azStorage.url]"
            }
          }
        },
        {
          "name": "[variables('guid1')]",
          "type": "jobs",
          "apiVersion": "2019-06-01",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Storage/storageAccounts/', variables('vhdStorageAccountName'))]",
            "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'))]",
            "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'), '/runbooks/',variables('runbookName'))]",
            "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'), '/Modules/', variables('psModules').azAccounts.name)]",
            "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'), '/Modules/', variables('psModules').azStorage.name)]"
          ],
          "properties": {
            "runbook": {
              "name": "[variables('runbookName')]"
            },
            "parameters": {
              "newStorageAccountName": "[variables('vhdStorageAccountName')]",
              "newStorageAccountContainerName": "[variables('vhdStorageAccountContainerName')]",
              "destVHDname": "[variables('destOSvhdName')]",
              "vhdURL": "[variables('sourceOSvhdURL')]",
              "sasToken": "[parameters('sasToken')]"
            }
          }
        }
      ]
    },
    {
      "comments": "Default Network Security Group for ZNSS template",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "z-ssh-rule",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "z-smca-rule",
            "properties": {
              "description": "Allow SMCA",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9422",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "z-remotesupport-rule",
            "properties": {
              "description": "Allow Remote Support",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "12002",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "199.168.148.0/24",
              "access": "Allow",
              "priority": 102,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "z-nanolog-rule",
            "properties": {
              "description": "Allow Nanolog",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9431",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 103,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "z-dns-rule",
            "properties": {
              "description": "Allow DNS",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "53",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 104,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "z-ntp-rule",
            "properties": {
              "description": "Allow NTP",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "123",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "z-cdss-rule",
            "properties": {
              "description": "Allow SMCDSS",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 106,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ],
        "defaultSecurityRules": [
          {
            "name": "AllowVnetInBound",
            "properties": {
              "description": "Allow inbound traffic from all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAzureLoadBalancerInBound",
            "properties": {
              "description": "Allow inbound traffic from azure load balancer",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 65001,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "description": "Deny all inbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowVnetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowInternetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "access": "Allow",
              "priority": 65001,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllOutBound",
            "properties": {
              "provisioningState": "Succeeded",
              "description": "Deny all outbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "name": "[variables('publicIPAddress1Name')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[variables('publicIPDns')]"
        }
      }
    },
    {
      "condition": "[equals(parameters('natGatewayNeeded'), 'yes')]",
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddress2Name')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('vmName')]"
        }
      }
    },
    {
      "condition": "[equals(parameters('vNetNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('vnetSubnetPrefix')]",
              "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]"
              },
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ],
        "enableDdosProtection": false,
        "enableVmProtection": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]"
      ]
    },
    {
      "condition": "[equals(parameters('natGatewayNeeded'), 'yes')]",
      "type": "Microsoft.Network/natGateways",
      "apiVersion": "2020-11-01",
      "name": "[variables('natGatewayName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "idleTimeoutInMinutes": 4,
        "publicIpAddresses": "[if(not(empty(variables('publicIPDns'))), variables('publicIpAddresses'), json('null'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddress2Name'))]"
      ]
    },
    {
      "condition": "[equals(parameters('natGatewayNeeded'), 'yes')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[concat(variables('virtualNetworkName'), '/Zscaler-NSS-Subnet')]",
      "properties": {
        "addressPrefix": "[parameters('vnetSubnetPrefix')]",
        "natGateway": {
          "id": "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]"
        },
        "privateEndpointNetworkPolicies": "Enabled",
        "privateLinkServiceNetworkPolicies": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ]
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nic1Name')]",
      "location": "[variables('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddress1Name'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "primary": true,
              "privateIPAddressVersion": "IPv4"
            }
          }
        ],
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": false,
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('networkSecurityGroupName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('subnetName'), 'Zscaler-NSS-Subnet')]",
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddress1Name'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[variables('nic2Name')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddress2Name'))]",
        "[variables('virtualNetworkName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "primary": true
            }
          }
        ],
        "primary": false,
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[parameters('vmName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nic1Name'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nic2Name'))]",
        "[concat('Microsoft.Automation/automationAccounts/', variables('automationAccountName'), '/', 'jobs', '/', variables('guid1'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "name": "[concat(parameters('vmName'), '_osdisk.vhd')]",
            "createOption": "Attach",
            "vhd": {
              "uri": "[variables('destinationOSvhdURL')]"
            },
            "caching": "ReadWrite",
            "writeAcceleratorEnabled": false,
            "diskSizeGB": 600
          },
          "dataDisks": [
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic1Name'))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic2Name'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'/znssCustomScriptExtension')]",
      "apiVersion": "2019-12-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.1",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "timestamp": 123456789,
          "fileUris": [
            "https://raw.githubusercontent.com/willguibr/nss-azure-deploy/main/znssCustomScriptExtension.sh"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('bash ./znssCustomScriptExtension.sh', ' ', parameters('NEW_NAME_SERVER_IP'), parameters('SM_NET_DEV'), parameters('SM_NET_DFLT_GW'))]",
          "storageAccountName": "[variables('vhdStorageAccountName')]",
          "storageAccountKey": ""
        }
      }
    }
  ],
  "outputs": {}
}